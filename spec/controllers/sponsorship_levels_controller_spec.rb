require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe SponsorshipLevelsController do

  def mock_sponsorship_level(stubs={})
    @mock_sponsorship_level ||= mock_model(SponsorshipLevel, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all sponsorship_levels as @sponsorship_levels" do
      SponsorshipLevel.stub(:all) { [mock_sponsorship_level] }
      get :index
      assigns(:sponsorship_levels).should eq([mock_sponsorship_level])
    end
  end

  describe "GET show" do
    it "assigns the requested sponsorship_level as @sponsorship_level" do
      SponsorshipLevel.stub(:find).with("37") { mock_sponsorship_level }
      get :show, :id => "37"
      assigns(:sponsorship_level).should be(mock_sponsorship_level)
    end
  end

  describe "GET new" do
    it "assigns a new sponsorship_level as @sponsorship_level" do
      SponsorshipLevel.stub(:new) { mock_sponsorship_level }
      get :new
      assigns(:sponsorship_level).should be(mock_sponsorship_level)
    end
  end

  describe "GET edit" do
    it "assigns the requested sponsorship_level as @sponsorship_level" do
      SponsorshipLevel.stub(:find).with("37") { mock_sponsorship_level }
      get :edit, :id => "37"
      assigns(:sponsorship_level).should be(mock_sponsorship_level)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created sponsorship_level as @sponsorship_level" do
        SponsorshipLevel.stub(:new).with({'these' => 'params'}) { mock_sponsorship_level(:save => true) }
        post :create, :sponsorship_level => {'these' => 'params'}
        assigns(:sponsorship_level).should be(mock_sponsorship_level)
      end

      it "redirects to the created sponsorship_level" do
        SponsorshipLevel.stub(:new) { mock_sponsorship_level(:save => true) }
        post :create, :sponsorship_level => {}
        response.should redirect_to(sponsorship_level_url(mock_sponsorship_level))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved sponsorship_level as @sponsorship_level" do
        SponsorshipLevel.stub(:new).with({'these' => 'params'}) { mock_sponsorship_level(:save => false) }
        post :create, :sponsorship_level => {'these' => 'params'}
        assigns(:sponsorship_level).should be(mock_sponsorship_level)
      end

      it "re-renders the 'new' template" do
        SponsorshipLevel.stub(:new) { mock_sponsorship_level(:save => false) }
        post :create, :sponsorship_level => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested sponsorship_level" do
        SponsorshipLevel.stub(:find).with("37") { mock_sponsorship_level }
        mock_sponsorship_level.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :sponsorship_level => {'these' => 'params'}
      end

      it "assigns the requested sponsorship_level as @sponsorship_level" do
        SponsorshipLevel.stub(:find) { mock_sponsorship_level(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:sponsorship_level).should be(mock_sponsorship_level)
      end

      it "redirects to the sponsorship_level" do
        SponsorshipLevel.stub(:find) { mock_sponsorship_level(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(sponsorship_level_url(mock_sponsorship_level))
      end
    end

    describe "with invalid params" do
      it "assigns the sponsorship_level as @sponsorship_level" do
        SponsorshipLevel.stub(:find) { mock_sponsorship_level(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:sponsorship_level).should be(mock_sponsorship_level)
      end

      it "re-renders the 'edit' template" do
        SponsorshipLevel.stub(:find) { mock_sponsorship_level(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested sponsorship_level" do
      SponsorshipLevel.stub(:find).with("37") { mock_sponsorship_level }
      mock_sponsorship_level.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the sponsorship_levels list" do
      SponsorshipLevel.stub(:find) { mock_sponsorship_level }
      delete :destroy, :id => "1"
      response.should redirect_to(sponsorship_levels_url)
    end
  end

end
